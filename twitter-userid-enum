#!/usr/bin/env ruby
# encoding: UTF-8
#
# Multi-Threaded Twitter User ID Enumerator 
# Scripted by Derek Callaway [ decal (AT) sdf {D0T} org ]
# Tue Jun 28 07:53:23 EDT 2016
#
# https://github.com/decal/twitter-userid-enum 
#

require 'net/http'
require 'uri'
require 'thread'

include Net

# STARTING_ID = 783214    # @twitter
# STARTING_ID = 566231363 # @decalresponds
STARTING_ID = 30_000_000 

class TwitterEnum
  attr_reader :auri, :http, :requ, :resp, :name, :nmid

  @@mutex = Mutex.new

  public def initialize(anid = 0)
    raise Exception.new("Invalid anid value: #{anid}!") if anid <= 0

    begin
      @auri, @http, @requ, @resp, @name, @nmid = nil, nil, nil, nil, nil, nil
      @auri = URI.parse("https://twitter.com/intent/user?user_id=#{anid}")
      @http = HTTP.new(@auri.host, @auri.port)
      @http.use_ssl = true
      @requ = HTTP::Get.new(@auri.request_uri)
      @resp = http.request(@requ)
      linez = @resp.body.split($/)
    rescue Exception => e
      continue
    end

    linez.each do |l|
      l.strip!

      if l =~ %r{<title>([^\(]+)[ ][\(]([^\)]+)[\)][ a-z]+</title>}i
        $thrs.each do |t| 
          t.join
        end

        begin
          @name, @nmid = $1, $2

          @name.strip!
          @nmid.strip!

          @@mutex.synchronize do
            STDOUT.puts("#{@name} #{@nmid} #{anid}")
          end
        rescue Exception => e
          @@mutex.synchronize do
            STDERR.puts("#{excd} #{anid}")
          end

          next
        end
      end
    end 
  end
end

$thrs = [] 
twid = (ARGV.size.zero? or ARGV.first.to_i.zero?) ? STARTING_ID : ARGV.first.to_i

loop do
  $thrs << [ Thread.new { |t| t = TwitterEnum.new(twid -= 1) } ]
  $thrs.each { |t| t.join } if $thrs.size >= 0XF
end

exit 0
